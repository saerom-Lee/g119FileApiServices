package kr.nlip.sftm.controller;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.List;
import java.util.Locale;
import java.util.stream.Collectors;
import java.util.zip.ZipInputStream;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.PropertySource;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.util.StreamUtils;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import kr.nlip.sftm.controller.config.FileUploadResponse;
import kr.nlip.sftm.service.FileUploadDownloadService;
import kr.nlip.sftm.service.TestService;
import lombok.extern.slf4j.Slf4j;

@RestController
@PropertySource(value = "application.properties", encoding = "UTF-8")
@Slf4j
public class G119FileApiController {
	
	@Autowired 
	TestService testService;
	
	@Autowired
    private FileUploadDownloadService service;
    
	//지능형파일경로
	@Value("${file.upload-dir}")
	String upload_dir;
	
	//연계URL(지능형 <-> 국토정보플랫폼)
	@Value("${net_url}")
	String net_url;
	
	//지능형URL
	@Value("${jineun_url}")
	String jineun_url;

	//지오프라URL
	@Value("${jio_url}")
	String jio_url;

	//OS
	@Value("${os_type}")
	String os_type;
	
	private static OutputStream outputStream;
	
	private static String errFilePath = "logs"+File.separatorChar+"Error.log";
	private static String stFilePath = "logs"+File.separatorChar+"status.log";
	
	/******************************************************TEST함수****************************************/
	/******************************************************프로젝트사용시 TEST함수로 구동확인*********************/
    @RequestMapping("/testView.do")
    public ModelAndView test(ModelAndView mav) {
    	System.out.println("testView.do API 호출");
        mav.setViewName("testView");
        mav.addObject("message","스프링 부트 애플리케이션 테스트");
        // List<TestVo> testList = testService.selectTest();
        // mav.addObject("list", testList);
        return mav;
    }
    
    @PostMapping("/fileTest.do")
    public void test(@RequestParam MultipartFile clipFile) {
    	System.out.println("testView.do API 호출" + clipFile.getName());
    }

    /******************************************************TEST함수****************************************/
    
    //업로드파일(단일)
    @PostMapping("/uploadFile")
    public FileUploadResponse uploadFile(@RequestParam("file") MultipartFile file) {
        String fileName = service.storeFile(file);
        
        String fileDownloadUri = ServletUriComponentsBuilder.fromCurrentContextPath()
                                .path("/downloadFile/")
                                .path(fileName)
                                .toUriString();
        
        return new FileUploadResponse(fileName, fileDownloadUri, file.getContentType(), file.getSize());
    }
    
    //업로드파일(다중)
    @PostMapping("/uploadMultipleFiles")
    public List<FileUploadResponse> uploadMultipleFiles(@RequestParam("files") MultipartFile[] files){
        return Arrays.asList(files)
                .stream()
                .map(file -> uploadFile(file))
                .collect(Collectors.toList());
    }
    
    //다운로드파일
    @GetMapping("/downloadFile/{fileName:.+}")
    public ResponseEntity<Resource> downloadFile(@PathVariable String fileName, HttpServletRequest request){
         // Load file as Resource
        Resource resource = service.loadFileAsResource(fileName);
 
        // Try to determine file's content type
        String contentType = null;
        try {
            contentType = request.getServletContext().getMimeType(resource.getFile().getAbsolutePath());
        } catch (IOException ex) {
            logSaver("downloadFile Err : Could not determine file type.");
        }
 
        // Fallback to the default content type if type could not be determined
        if(contentType == null) {
            contentType = "application/octet-stream";
        }
 
        return ResponseEntity.ok()
                .contentType(MediaType.parseMediaType(contentType))
                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + resource.getFilename() + "\"")
                .body(resource);
    }
    
    //1. 지능형  - > 지오프라 데이터 가져와서 저장
    @RequestMapping("/originFileDown.do")
    public void jineunToJio(@RequestParam String filePath) {
        InputStream is = null;
        FileOutputStream os = null;
        
        try{
            URL url = new URL(jio_url);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            int responseCode = conn.getResponseCode();

            // Status 가 200 일 때
            if (responseCode == HttpURLConnection.HTTP_OK) {
                log.info("File transfer successful --> "+filePath);
                String fileName = "";
                String disposition = conn.getHeaderField("Content-Disposition");
                String contentType = conn.getContentType();
                
                // 일반적으로 Content-Disposition 헤더에 있지만 
                // 없을 경우 url 에서 추출해 내면 된다.
                if (disposition != null) {
                    String target = "filename=";
                    int index = disposition.indexOf(target);
                    if (index != -1) {
                        fileName = disposition.substring(index + target.length() + 1);
                    }
                } else {
                    fileName = jio_url.substring(jio_url.lastIndexOf("/") + 1);
                }

                statusLogSaver("-------------------------------------");
		        statusLogSaver("jineunToJio -> originFileDown.do Call");
		        statusLogSaver("Content-Type : "+ contentType);
		        statusLogSaver("Content-Disposition : " + disposition);
		        statusLogSaver("fileName : "+ fileName);
		        statusLogSaver("-------------------------------------");
		        
                File file = new File(upload_dir, fileName);
                //fail directory create
	        	if(!file.exists()){
	        		file.mkdir();
	        	}
                is = conn.getInputStream();
                os = new FileOutputStream(file);

                final int BUFFER_SIZE = 4096;
                int bytesRead;
                byte[] buffer = new byte[BUFFER_SIZE];
                while ((bytesRead = is.read(buffer)) != -1) {
                    os.write(buffer, 0, bytesRead);
                }
                os.close();
                is.close();
                System.out.println("File downloaded");
            } else {
                System.out.println("No file to download. Server replied HTTP code: " + responseCode);
            }
            conn.disconnect();
        } catch (IOException e){
			logSaver("originFileDown.do -> FileException Err "+ filePath);
            try {
                if (is != null){
                    is.close();
                }
                if (os != null){
                    os.close();
                }
            } catch (IOException e1){
                logSaver("jineunToJio -> outinStream Close Err "+ filePath);
            }
        }
    }
    
    //2. 지능형 클리핑 파일 찾기
    @RequestMapping("/clipingFileSearch.do")
    public void clipingFileSearch(@RequestParam String filePath, @RequestParam String type) {
    	String inputDir = filePath; //지능형 클리핑 파일 .zip파일
        String sendType = type; //지오프라 -> 국토정보플랫폼 : A, 지능형 -> 공급시스템 B
        String target = "";
        ZipInputStream in = null; 
        byte[] temp = new byte[2048];
        int length = 0;
        
        if(sendType.equals("A")) {
        	target = "http://localhost/fileTest.do";
        } else if(sendType.equals("B")) {
        	target = "191.";
        }
        try {
	        File file = new File(inputDir);
	        FileInputStream fis = new FileInputStream(file);
	        OutputStream os = null;
	        InputStream is = null;
	        URL url = new URL(target+"?clipFile=" + fis);
	        HttpURLConnection con = (HttpURLConnection) url.openConnection();
           con.setRequestMethod("POST");
           con.setDoInput(true);
           con.setDoOutput(true);
           con.setRequestProperty("type", "put");
           con.setRequestProperty("fileName", file.getName());
           os = con.getOutputStream();
 
           while ((length = fis.read(temp)) > 0) {
              os.write(temp, 0, length);
           }
           is = con.getInputStream();
          // success msg
          System.out.println(con.getHeaderField("msg"));
        } catch (IOException e) {
           logSaver("clipingFileSearch -> FileException Err "+ filePath);
        }
    }
    
    //3. 지능형 클리핑 파일 저장
    @RequestMapping("/clipingFileDown.do")
    public void clipingFileDown(@RequestParam MultipartFile clipFile, @RequestParam String type) {
    	System.out.println(">>>>>>>>>>> clipFile.getName()" + clipFile.getName()); //지능형 클리핑 파일 .zip파일
    	System.out.println(">>>>>>>>>>> type" + type); 
        String sendType = type; //지오프라 -> 국토정보플랫폼 : A, 지능형 -> 공급시스템 B
        String target = "";

        if(sendType.equals("A")) {
        	target = "192.";
        } else if(sendType.equals("B")) {
        	target = "191.";
        }
        
    }
    
    //4. 지능형 클리핑 파일 찾기
    @RequestMapping("/clipingFileSendNlip.do")
    public void clipingFileSendNlip(@RequestParam MultipartFile clipFile) {
        String target = "http://localhost/testView.do";
        
    }
    
    /**
	 * Log파일을 가져오기 위한 RequestMapping
	 * logs 폴더를 조회하고, 해당 파일을 다운로드 할 수 있는 기능.
	 * http://localhost/logFinder/logs/Error
	 */
	@RequestMapping("/logFinder/**")
	@ResponseBody
	public Object logFinder(HttpServletRequest request, HttpServletResponse response) throws IOException {
		String path = request.getRequestURI().substring("/logFinder/".length());
		Path p = Paths.get("logs", path);
		File file = p.toFile();
		if (file.isDirectory()) {
			return file.list();
		} else {
            response.setContentType("application/octet-stream");
            response.setContentLength((int) file.length());
            StreamUtils.copy(Files.newInputStream(p, StandardOpenOption.READ), response.getOutputStream());
            return null;
        }
	}
	
	/**
	 * Error log -> file KEY append
	 * @param o
	 */
	public static void logSaver(Object o) {
		Calendar cal = Calendar.getInstance();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd kk:mm:ss", Locale.getDefault());
		String date = sdf.format(cal.getTime());
		String out = "[" + date + "] " + o;
		
		try(BufferedWriter bw = new BufferedWriter(new FileWriter(errFilePath, true))){
			bw.append(out);
			bw.newLine();
		} catch(Exception e) {
			log.error("A Fatal Error" + e);
		}
	}
	
	/**
	 * Status log -> file KEY append
	 * @param o
	 */
	public static void statusLogSaver(Object o) {
		Calendar cal = Calendar.getInstance();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd kk:mm:ss", Locale.getDefault());
		String date = sdf.format(cal.getTime());
		String out = "[" + date + "] " + o;
		
		try(BufferedWriter bw = new BufferedWriter(new FileWriter(stFilePath, true))){
			bw.append(out);
			bw.newLine();
		} catch(Exception e) {
			log.error("A Fatal Error" + e);
		}
	}
}

